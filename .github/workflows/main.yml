name: Build and Push to Harbor
on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22.15'
  IMAGE_NAME: 'portfolio-api'

jobs:
  build:
    name: Build & Deploy Docker Image
    runs-on: ubuntu-22.04
    outputs:
      image: ${{ steps.meta.outputs.image }}
      version: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (for version read)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Harbor
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.HARBOR_REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Compute image tags
        id: meta
        run: |
          set -euo pipefail
          IMAGE="${{ secrets.HARBOR_REGISTRY }}/${{ secrets.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}"
          VERSION=$(node -p "require('./package.json').version")
          TAGS="${IMAGE}:${VERSION}\n${IMAGE}:latest"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          {
            echo "tags<<EOF"
            printf "%b\n" "$TAGS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          provenance: false

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-22.04
    needs: build

    steps:
      - name: Install WireGuard tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y wireguard-tools

      - name: Write WireGuard config from secret
        run: |
          set -euo pipefail
          cat > ./wg-client.conf <<'WGEOF'
          ${{ secrets.WG_CONFIG }}
          WGEOF
          chmod 600 ./wg-client.conf

      - name: Start WireGuard tunnel
        run: |
          set -euo pipefail
          sudo wg-quick up ./wg-client.conf

      - name: Check WireGuard connectivity
        run: |
          set -euo pipefail
          sudo wg show || true
          ip addr show || true
          echo "Pinging PROD_HOST ..."
          ping -c 3 "${{ secrets.PROD_HOST }}" || true

      - name: Rollout new image via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          port: ${{ secrets.PROD_PORT }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          timeout: 60s
          script_stop: true
          script: |
            set -euo pipefail
            IMAGE="${{ needs.build.outputs.image }}"
            VERSION="${{ needs.build.outputs.version }}"
            if [ -z "$IMAGE" ]; then
              IMAGE="${{ secrets.HARBOR_REGISTRY }}/${{ secrets.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}"
            fi
            echo "Rolling out ${IMAGE}:${VERSION}"
            kubectl -n portfolio set image deployment/portfolio-api api="${IMAGE}:${VERSION}" --record
            kubectl -n portfolio rollout status deployment/portfolio-api

      - name: Stop WireGuard tunnel
        if: always()
        run: |
          sudo wg-quick down ./wg-client.conf
